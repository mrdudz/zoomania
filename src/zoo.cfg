#$1000-$2FFF MSX
#$2800-$3FFF GFX
#$4000-$CBFF Code,Heap, Stack
#$CC00-$CFFF Screen Mem for BMP
#$E000-$FFFF BMP

SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $C7F3;
}

MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $07FF, size = $0002;
    HEADER:   file = %O,               start = $0801, size = $000D;
    # 080d-0dbf free for some code
    MAIN1:    file = %O, define = yes, start = $080D, size = $0dc0 - $080d, fill = yes;
    # 0dc0-~4000 gfx,msx,gfx
    MAINDAT:  file = %O, define = yes, start = $0dc0, size = $3340;
    MAIN:     file = %O, define = yes, start = __MAINDAT_LAST__, size = __HIMEM__ - __MAINDAT_LAST__;
    BSS:      file = "",               start = __ONCE_RUN__,    size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__;
}

SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN1,    type = ro;
    DAT:      load = MAINDAT,  type = ro, start = $0dc0;
    LOWCODE:  load = MAIN1,    type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;  # uninitialized, but reserves output space
    ONCE:     load = MAIN,     type = ro,  define   = yes;
    BSS:      load = BSS,      type = bss, define   = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}


